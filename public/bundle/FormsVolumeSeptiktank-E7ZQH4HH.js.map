{
  "version": 3,
  "sources": ["../../src/page/ControlPanel/Admin/Responden/Detail/FormsVolumeSeptiktank.jsx"],
  "sourcesContent": ["import React, { useLayoutEffect, useState } from \"react\";\nimport { ButtonGroup, Card, Col, Row } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as h from \"~/Helpers\";\nimport { setModule } from \"~/redux\";\n\nconst FormsVolumeSeptiktank = () => {\n   const { module, init } = useSelector((e) => e.redux);\n   const { openFormsVolumeSeptiktank, detailContent } = module;\n   const dispatch = useDispatch();\n\n   // bool\n   const [isSubmit, setIsSubmit] = useState(false);\n   const [isLoading, setIsLoading] = useState(true);\n\n   // object\n   const [input, setInput] = useState({});\n   const [errors, setErrors] = useState({});\n\n   // array\n   const [daftarJenisSeptiktank, setDaftarJenisSeptiktank] = useState([]);\n\n   const initPage = () => {\n      const fetch = h.get(`/initpenampungantinja`);\n      fetch.then((res) => {\n         if (typeof res === \"undefined\") return;\n\n         const { data } = res;\n\n         if (typeof data.code !== \"undefined\" && h.parse(\"code\", data) !== 200) {\n            h.notification(false, h.parse(\"message\", data));\n            return;\n         }\n\n         setDaftarJenisSeptiktank(data.daftarJenisSeptiktank);\n      });\n      fetch.finally(() => {\n         setIsLoading(false);\n      });\n   };\n\n   useLayoutEffect(() => {\n      if (openFormsVolumeSeptiktank && h.objLength(detailContent)) initPage();\n      return () => {};\n   }, [openFormsVolumeSeptiktank, detailContent]);\n\n   const clearProps = () => {\n      setInput({});\n      setErrors({});\n   };\n\n   const handleClose = () => {\n      clearProps();\n      dispatch(setModule({ ...module, openFormsVolumeSeptiktank: false }));\n   };\n\n   const submit = (e) => {\n      e.preventDefault();\n      const formData = { user_modified: h.parse(\"username\", init), id_responden: h.parse(\"id\", detailContent) };\n      Object.keys(input).forEach((key) => (formData[key] = input[key]));\n\n      setIsSubmit(true);\n      const fetch = h.post(`/submitvolumeseptiktank`, formData);\n      fetch.then((res) => {\n         if (typeof res === \"undefined\") return;\n\n         const { data } = res;\n         if (typeof data.code !== \"undefined\" && h.parse(\"code\", data) !== 200) {\n            h.notification(false, h.parse(\"message\", data));\n            return;\n         }\n\n         setErrors(data.errors);\n         h.notification(data.status, data.msg_response);\n\n         if (!data.status) return;\n\n         clearProps();\n         dispatch(setModule({ ...module, ...data.content, openFormsVolumeSeptiktank: false }));\n      });\n      fetch.finally(() => {\n         setIsSubmit(false);\n      });\n   };\n\n   return (\n      <React.Fragment>\n         {openFormsVolumeSeptiktank && <div className=\"drawer-overlay\" style={{ zIndex: 9999 }} />}\n         <div\n            className={`bg-white drawer drawer-end ${openFormsVolumeSeptiktank ? \"drawer-on\" : \"\"}`}\n            style={{ width: window.innerWidth / 2, zIndex: 9999 }}>\n            <Card className=\"rounded-0 w-100\">\n               <Card.Header className=\"pe-5\">\n                  <div className=\"card-title\">\n                     <div className=\"d-flex justify-content-center flex-column me-3\">\n                        <span className=\"fs-4 fw-bold text-gray-900 text-hover-primary me-1 lh-1\">Volume Septiktank</span>\n                     </div>\n                  </div>\n                  <div className=\"card-toolbar\">\n                     <button className=\"btn btn-sm btn-icon btn-active-light-primary\" onClick={handleClose}>\n                        <i className=\"ki-duotone ki-cross fs-2\">\n                           <span className=\"path1\" />\n                           <span className=\"path2\" />\n                        </i>\n                     </button>\n                  </div>\n               </Card.Header>\n               <Card.Body className=\"hover-scroll-overlay-y\">\n                  {!isLoading && (\n                     <React.Fragment>\n                        <Row>\n                           <Col>\n                              {h.form_select(\n                                 \"Jenis Septiktank\",\n                                 \"id_jenis_septiktank\",\n                                 {\n                                    onChange: (e) => setInput((prev) => ({ ...prev, [e.target.name]: e.target.value })),\n                                    value: h.parse(\"id_jenis_septiktank\", input),\n                                 },\n                                 daftarJenisSeptiktank.map((row) => ({ value: h.parse(\"id\", row), label: h.parse(\"nama\", row) })),\n                                 true,\n                                 errors\n                              )}\n                           </Col>\n                           <Col>\n                              {h.form_text(\n                                 `Lebar`,\n                                 `lebar`,\n                                 {\n                                    onChange: (e) => setInput((prev) => ({ ...prev, [e.target.name]: e.target.value })),\n                                    value: h.parse(`lebar`, input),\n                                 },\n                                 true,\n                                 errors\n                              )}\n                           </Col>\n                           <Col>\n                              {h.form_text(\n                                 `Kedalaman`,\n                                 `kedalaman`,\n                                 {\n                                    onChange: (e) => setInput((prev) => ({ ...prev, [e.target.name]: e.target.value })),\n                                    value: h.parse(`kedalaman`, input),\n                                 },\n                                 true,\n                                 errors\n                              )}\n                           </Col>\n                        </Row>\n                        <Row>\n                           <Col>\n                              {h.form_text(\n                                 `Diameter Tabung`,\n                                 `diameter_tabung`,\n                                 {\n                                    onChange: (e) => setInput((prev) => ({ ...prev, [e.target.name]: e.target.value })),\n                                    value: h.parse(`diameter_tabung`, input),\n                                 },\n                                 true,\n                                 errors\n                              )}\n                           </Col>\n                           <Col>\n                              {h.form_text(\n                                 `Panjang`,\n                                 `panjang`,\n                                 {\n                                    onChange: (e) => setInput((prev) => ({ ...prev, [e.target.name]: e.target.value })),\n                                    value: h.parse(`panjang`, input),\n                                 },\n                                 true,\n                                 errors\n                              )}\n                           </Col>\n                           <Col />\n                        </Row>\n                     </React.Fragment>\n                  )}\n               </Card.Body>\n               <Card.Footer className=\"text-end\">\n                  <ButtonGroup>\n                     {h.buttons(`Simpan`, isSubmit, {\n                        onClick: isSubmit ? null : submit,\n                     })}\n                     {h.buttons(`Batal`, false, {\n                        variant: \"danger\",\n                        onClick: () => handleClose(),\n                     })}\n                  </ButtonGroup>\n               </Card.Footer>\n            </Card>\n         </div>\n      </React.Fragment>\n   );\n};\nexport default FormsVolumeSeptiktank;\n"],
  "mappings": "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",
  "names": ["import_leaflet", "import_react", "FormsVolumeSeptiktank", "module", "init", "useSelector", "e", "openFormsVolumeSeptiktank", "detailContent", "dispatch", "useDispatch", "isSubmit", "setIsSubmit", "isLoading", "setIsLoading", "input", "setInput", "errors", "setErrors", "daftarJenisSeptiktank", "setDaftarJenisSeptiktank", "initPage", "fetch", "get", "res", "data", "parse", "notification", "objLength", "clearProps", "handleClose", "setModule", "submit", "formData", "key", "post", "React", "Card_default", "Row_default", "Col_default", "form_select", "prev", "row", "form_text", "ButtonGroup_default", "buttons", "FormsVolumeSeptiktank_default"]
}
